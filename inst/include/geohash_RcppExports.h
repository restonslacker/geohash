// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_geohash_RCPPEXPORTS_H_GEN_
#define RCPP_geohash_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace geohash {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("geohash", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("geohash", "_geohash_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in geohash");
            }
        }
    }

    inline CharacterVector gh_encode(NumericVector lats, NumericVector lngs, IntegerVector precision = 6) {
        typedef SEXP(*Ptr_gh_encode)(SEXP,SEXP,SEXP);
        static Ptr_gh_encode p_gh_encode = NULL;
        if (p_gh_encode == NULL) {
            validateSignature("CharacterVector(*gh_encode)(NumericVector,NumericVector,IntegerVector)");
            p_gh_encode = (Ptr_gh_encode)R_GetCCallable("geohash", "_geohash_gh_encode");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gh_encode(Shield<SEXP>(Rcpp::wrap(lats)), Shield<SEXP>(Rcpp::wrap(lngs)), Shield<SEXP>(Rcpp::wrap(precision)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<CharacterVector >(rcpp_result_gen);
    }

    inline DataFrame gh_decode(CharacterVector hashes) {
        typedef SEXP(*Ptr_gh_decode)(SEXP);
        static Ptr_gh_decode p_gh_decode = NULL;
        if (p_gh_decode == NULL) {
            validateSignature("DataFrame(*gh_decode)(CharacterVector)");
            p_gh_decode = (Ptr_gh_decode)R_GetCCallable("geohash", "_geohash_gh_decode");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gh_decode(Shield<SEXP>(Rcpp::wrap(hashes)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline DataFrame gh_neighbours(CharacterVector hashes) {
        typedef SEXP(*Ptr_gh_neighbours)(SEXP);
        static Ptr_gh_neighbours p_gh_neighbours = NULL;
        if (p_gh_neighbours == NULL) {
            validateSignature("DataFrame(*gh_neighbours)(CharacterVector)");
            p_gh_neighbours = (Ptr_gh_neighbours)R_GetCCallable("geohash", "_geohash_gh_neighbours");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gh_neighbours(Shield<SEXP>(Rcpp::wrap(hashes)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

    inline CharacterVector gh_neighbour(CharacterVector hashes, IntegerVector direction) {
        typedef SEXP(*Ptr_gh_neighbour)(SEXP,SEXP);
        static Ptr_gh_neighbour p_gh_neighbour = NULL;
        if (p_gh_neighbour == NULL) {
            validateSignature("CharacterVector(*gh_neighbour)(CharacterVector,IntegerVector)");
            p_gh_neighbour = (Ptr_gh_neighbour)R_GetCCallable("geohash", "_geohash_gh_neighbour");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gh_neighbour(Shield<SEXP>(Rcpp::wrap(hashes)), Shield<SEXP>(Rcpp::wrap(direction)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<CharacterVector >(rcpp_result_gen);
    }

}

#endif // RCPP_geohash_RCPPEXPORTS_H_GEN_
