// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/geohash.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// gh_encode
CharacterVector gh_encode(NumericVector lats, NumericVector lngs, IntegerVector precision);
static SEXP _geohash_gh_encode_try(SEXP latsSEXP, SEXP lngsSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lats(latsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lngs(lngsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(gh_encode(lats, lngs, precision));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _geohash_gh_encode(SEXP latsSEXP, SEXP lngsSEXP, SEXP precisionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_geohash_gh_encode_try(latsSEXP, lngsSEXP, precisionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gh_decode
DataFrame gh_decode(CharacterVector hashes);
static SEXP _geohash_gh_decode_try(SEXP hashesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type hashes(hashesSEXP);
    rcpp_result_gen = Rcpp::wrap(gh_decode(hashes));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _geohash_gh_decode(SEXP hashesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_geohash_gh_decode_try(hashesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gh_neighbours
DataFrame gh_neighbours(CharacterVector hashes);
static SEXP _geohash_gh_neighbours_try(SEXP hashesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type hashes(hashesSEXP);
    rcpp_result_gen = Rcpp::wrap(gh_neighbours(hashes));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _geohash_gh_neighbours(SEXP hashesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_geohash_gh_neighbours_try(hashesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gh_neighbour
CharacterVector gh_neighbour(CharacterVector hashes, IntegerVector direction);
static SEXP _geohash_gh_neighbour_try(SEXP hashesSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type hashes(hashesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(gh_neighbour(hashes, direction));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _geohash_gh_neighbour(SEXP hashesSEXP, SEXP directionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_geohash_gh_neighbour_try(hashesSEXP, directionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _geohash_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("CharacterVector(*gh_encode)(NumericVector,NumericVector,IntegerVector)");
        signatures.insert("DataFrame(*gh_decode)(CharacterVector)");
        signatures.insert("DataFrame(*gh_neighbours)(CharacterVector)");
        signatures.insert("CharacterVector(*gh_neighbour)(CharacterVector,IntegerVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _geohash_RcppExport_registerCCallable() { 
    R_RegisterCCallable("geohash", "_geohash_gh_encode", (DL_FUNC)_geohash_gh_encode_try);
    R_RegisterCCallable("geohash", "_geohash_gh_decode", (DL_FUNC)_geohash_gh_decode_try);
    R_RegisterCCallable("geohash", "_geohash_gh_neighbours", (DL_FUNC)_geohash_gh_neighbours_try);
    R_RegisterCCallable("geohash", "_geohash_gh_neighbour", (DL_FUNC)_geohash_gh_neighbour_try);
    R_RegisterCCallable("geohash", "_geohash_RcppExport_validate", (DL_FUNC)_geohash_RcppExport_validate);
    return R_NilValue;
}
